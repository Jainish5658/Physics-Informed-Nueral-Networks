{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jainish5658/Physics-Informed-Nueral-Networks/blob/main/code%20for%20euler%20beam%20vibration\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "OoJ039N5-oIE"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import matplotlib.pyplot as plt\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "iF8Egz2t-1Lz"
      },
      "outputs": [],
      "source": [
        "class Vibration(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Vibration, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Linear(2,64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64,64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64,128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128,128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128,64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64,1),\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "6sTeEkS0Ggce"
      },
      "outputs": [],
      "source": [
        "class Net:\n",
        "    def __init__(self):\n",
        "        device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "        self.model = Vibration().to(device)\n",
        "        self.h = 0.01\n",
        "        self.k = 0.1\n",
        "        x = torch.arange(0, 8+self.h, self.h)\n",
        "        t = torch.arange(0, 1+self.k, self.k)\n",
        "\n",
        "        self.X = torch.stack(torch.meshgrid(x, t)).reshape(2,-1).T\n",
        "        self.X = self.X.to(device)\n",
        "        self.X.requires_grad = True\n",
        "\n",
        "        # Boundary and initial condition sampling\n",
        "        bc1 = torch.stack(torch.meshgrid(torch.tensor([x[0]]), t)).reshape(2,-1).T  # x = 0\n",
        "        bc2 = torch.stack(torch.meshgrid(torch.tensor([x[-1]]), t)).reshape(2,-1).T  # x = L\n",
        "        ic1 = torch.stack(torch.meshgrid(x, torch.tensor([t[0]]))).reshape(2,-1).T  # t = 0\n",
        "\n",
        "        self.X_train = torch.cat([bc1, bc2, ic1])\n",
        "        self.X_train = self.X_train.to(device)\n",
        "\n",
        "        # Target for boundary and initial conditions\n",
        "        y_bc1 = torch.zeros(len(bc1))\n",
        "        y_bc2 = torch.zeros(len(bc2))\n",
        "        y_ic1 = torch.sin(torch.pi*ic1[:,0])\n",
        "        self.y_train = torch.cat([y_bc1, y_bc2, y_ic1]).unsqueeze(1)\n",
        "        self.y_train = self.y_train.to(device)\n",
        "\n",
        "        self.adam = torch.optim.Adam(self.model.parameters())\n",
        "        self.optimizer = torch.optim.LBFGS(self.model.parameters(), lr=0.001, max_iter=50000,\n",
        "                                           max_eval=50000, history_size=50, tolerance_grad=1e-7,\n",
        "                                           tolerance_change=1.0*np.finfo(float).eps, line_search_fn=\"strong_wolfe\")\n",
        "\n",
        "        self.criterion = nn.MSELoss()\n",
        "        self.iter = 1\n",
        "\n",
        "    def loss_func(self):\n",
        "        self.adam.zero_grad()\n",
        "        self.optimizer.zero_grad()\n",
        "\n",
        "        # Data loss (boundary and initial condition losses)\n",
        "        y_pred = self.model(self.X_train)\n",
        "        loss_data = self.criterion(y_pred, self.y_train)\n",
        "\n",
        "        # PDE loss\n",
        "        u = self.model(self.X)\n",
        "        du_dX = torch.autograd.grad(u, self.X, grad_outputs=torch.ones_like(u), create_graph=True, retain_graph=True)[0]\n",
        "        du_dx = du_dX[:, 0]\n",
        "        du_dt = du_dX[:, 1]\n",
        "\n",
        "        du_dXX = torch.autograd.grad(du_dX, self.X, grad_outputs=torch.ones_like(du_dX), create_graph=True, retain_graph=True)[0]\n",
        "        du_dxx = du_dXX[:, 0]\n",
        "        du_dtt = du_dXX[:, 1]\n",
        "\n",
        "        du_dXXX = torch.autograd.grad(du_dXX, self.X, grad_outputs=torch.ones_like(du_dXX), create_graph=True, retain_graph=True)[0]\n",
        "        du_dXXXX = torch.autograd.grad(du_dXXX, self.X, grad_outputs=torch.ones_like(du_dXXX), create_graph=True, retain_graph=True)[0]\n",
        "        du_dxxxx = du_dXXXX[:, 0]\n",
        "\n",
        "\n",
        "        # Boundary and initial condition losses\n",
        "        loss_bc3 = self.criterion( du_dxx[torch.where(self.X[:, 0] == 0.0)[0]], torch.zeros_like(du_dxx[torch.where(self.X[:, 0] == 0)[0]]))\n",
        "        loss_bc4 = self.criterion( du_dxx[torch.where(self.X[:, 0] == 4.0)[0]], torch.zeros_like(du_dxx[torch.where(self.X[:, 0] == 2)[0]]))\n",
        "        loss_ic2 = self.criterion(du_dt[torch.where(self.X[:, 1] == 0.0)[0]], torch.zeros_like(du_dt[torch.where(self.X[:, 1] == 0)[0]]))\n",
        "        tolerance = 1e-6  # Define a tolerance for comparisons\n",
        "\n",
        "# Boundary conditions\n",
        "        #boundary_indices_x0 = torch.where(torch.abs(self.X[:, 0]) < tolerance)[0]\n",
        "        #boundary_indices_x1 = torch.where(torch.abs(self.X[:, 0] - 2) < tolerance)[0]  # Assuming boundary at x = 2\n",
        "\n",
        "        #loss_bc3 = self.criterion(du_dxx[boundary_indices_x0], torch.zeros_like(du_dxx[boundary_indices_x0]))\n",
        "        #loss_bc4 = self.criterion(du_dxx[boundary_indices_x1], torch.zeros_like(du_dxx[boundary_indices_x1]))\n",
        "\n",
        "# Initial condition\n",
        "        #initial_indices = torch.where(torch.abs(self.X[:, 1]) < tolerance)[0]\n",
        "        #loss_ic2 = self.criterion(du_dt[initial_indices], torch.zeros_like(du_dt[initial_indices]))\n",
        "\n",
        "        loss_pde = self.criterion((205.0) * du_dxxxx + (1)*(7.83* 0.12) * du_dtt,0.0*torch.ones_like(du_dxxxx))\n",
        "\n",
        "        # Total loss\n",
        "        loss = loss_data + loss_pde + loss_bc3 + loss_bc4 + loss_ic2\n",
        "        loss.backward(retain_graph=True)\n",
        "\n",
        "        if self.iter % 1000 == 0:\n",
        "            print(self.iter, loss.item())\n",
        "        self.iter += 1\n",
        "        return loss\n",
        "\n",
        "    def train(self):\n",
        "        self.model.train()\n",
        "        for i in range(80000):\n",
        "            self.adam.step(self.loss_func)\n",
        "        self.optimizer.step(self.loss_func)\n",
        "\n",
        "    def eval(self):\n",
        "        self.model.eval()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9e1a0zRrSUx6"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FfP_AR7h-9zG",
        "outputId": "96342a13-2e07-448f-bfe4-41acc93bb62c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000 0.004314273130148649\n",
            "2000 0.0005831174203194678\n",
            "3000 0.0009317233925685287\n",
            "4000 0.0013793074758723378\n",
            "5000 0.001237579737789929\n",
            "6000 0.00041224766755476594\n",
            "7000 0.00020083572599105537\n",
            "8000 9.230301657225937e-05\n",
            "9000 0.00046147246030159295\n",
            "10000 0.0007291854708455503\n",
            "11000 0.0013810753589496017\n",
            "12000 0.0012940054293721914\n",
            "13000 7.86142991273664e-05\n",
            "14000 0.0008219226729124784\n",
            "15000 0.00026578266988508403\n",
            "16000 0.00040955242002382874\n",
            "17000 0.0011854282347485423\n",
            "18000 0.00033795167109929025\n",
            "19000 0.0012102493783459067\n",
            "20000 0.000569445313885808\n",
            "21000 0.0005581951700150967\n",
            "22000 3.8806414522696286e-05\n",
            "23000 3.323981582070701e-05\n",
            "24000 0.00028913634014315903\n",
            "25000 0.0002946780005004257\n",
            "26000 6.475323607446626e-05\n",
            "27000 0.0001482953375671059\n",
            "28000 2.4296323317685165e-05\n",
            "29000 0.00020966095326002687\n",
            "30000 0.00014267473306972533\n",
            "31000 7.508201088057831e-05\n",
            "32000 1.2770852663379628e-05\n",
            "33000 6.760047835996374e-05\n",
            "34000 0.0008890991448424757\n",
            "35000 0.00014008532161824405\n",
            "36000 0.00020855922775808722\n",
            "37000 0.0003795737575273961\n",
            "38000 0.00010431349801365286\n",
            "39000 1.1805471331172157e-05\n",
            "40000 0.0002219086600234732\n",
            "41000 0.0009260028600692749\n",
            "42000 0.0007673398940823972\n",
            "43000 0.00012895878171548247\n",
            "44000 2.0139861589996144e-05\n",
            "45000 0.00018165384244639426\n",
            "46000 0.00015536970749963075\n",
            "47000 6.146542727947235e-05\n",
            "48000 4.546006675809622e-05\n",
            "49000 3.7416677514556795e-05\n",
            "50000 5.9209041864960454e-06\n",
            "51000 0.0001905139215523377\n",
            "52000 4.861643901676871e-06\n",
            "53000 3.216134064132348e-05\n",
            "54000 0.0008872995967976749\n",
            "55000 1.3185880561650265e-05\n",
            "56000 0.0018484912579879165\n",
            "57000 1.6197676814044826e-05\n",
            "58000 3.190560164512135e-06\n",
            "59000 6.316728104138747e-05\n",
            "60000 1.7516060324851424e-05\n",
            "61000 7.360899326158687e-05\n",
            "62000 5.546898592001526e-06\n",
            "63000 0.00016237144882325083\n",
            "64000 2.3495565983466804e-05\n",
            "65000 2.2039525902073365e-06\n",
            "66000 0.00010477899922989309\n",
            "67000 5.8959867601515725e-06\n",
            "68000 5.3395473514683545e-05\n",
            "69000 2.2012641238688957e-06\n",
            "70000 3.952743554691551e-06\n",
            "71000 0.0009294082992710173\n",
            "72000 6.120784382801503e-05\n",
            "73000 1.8194851918451604e-06\n",
            "74000 8.307941243401729e-06\n",
            "75000 0.00010720989666879177\n",
            "76000 4.410335805005161e-06\n",
            "77000 3.698081172842649e-06\n",
            "78000 0.000304623506963253\n",
            "79000 1.5394139154523145e-06\n",
            "80000 1.4571435258403653e-06\n"
          ]
        }
      ],
      "source": [
        "net = Net()\n",
        "net.train()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "_mx-jYIcDZxU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74f00e87-a93d-420c-fc4b-8d5a01351090"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Vibration(\n",
              "  (net): Sequential(\n",
              "    (0): Linear(in_features=2, out_features=64, bias=True)\n",
              "    (1): ReLU()\n",
              "    (2): Linear(in_features=64, out_features=64, bias=True)\n",
              "    (3): ReLU()\n",
              "    (4): Linear(in_features=64, out_features=128, bias=True)\n",
              "    (5): ReLU()\n",
              "    (6): Linear(in_features=128, out_features=128, bias=True)\n",
              "    (7): ReLU()\n",
              "    (8): Linear(in_features=128, out_features=64, bias=True)\n",
              "    (9): ReLU()\n",
              "    (10): Linear(in_features=64, out_features=1, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "net.model.eval()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "jvoRqsGfIzIq"
      },
      "outputs": [],
      "source": [
        "h = 0.01\n",
        "k = 0.01\n",
        "x = torch.arange(0,8+h,h)\n",
        "t = torch.arange(0,1+k,k)\n",
        "\n",
        "X = torch.stack(torch.meshgrid(x,t)).reshape(2,-1).T\n",
        "X = X.to(net.X.device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "d0KRJ-2nC7p8"
      },
      "outputs": [],
      "source": [
        "model = net.model\n",
        "model.eval()\n",
        "with torch.no_grad():\n",
        "  y_pred = model(X)\n",
        "  y_pred = y_pred.reshape(len(x),len(t)).cpu().numpy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "8_tyGATfDYZi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "88d3d0a3-96cf-4b6a-cdb4-fae1e2d3c3e7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7d7d36b3c460>]"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(y_pred[:,0])\n",
        "plt.plot(y_pred[:,-1])\n",
        "plt.plot(y_pred[:,50])\n",
        "plt.plot(y_pred[:,90])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "_EfXr7OFwR90",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "64e69b98-2897-4a41-992e-bbadde19758d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7d7d3813cfd0>]"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(y_pred[:,-1])\n",
        "plt.plot(y_pred[:,0])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jCsYdFLIo6b3"
      },
      "outputs": [],
      "source": [
        "class Net:\n",
        "    def __init__(self):\n",
        "        device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "        self.model = Vibration().to(device)\n",
        "        self.h = 0.1\n",
        "        self.k = 0.1\n",
        "        x = torch.arange(0, 1+self.h, self.h)\n",
        "        t = torch.arange(0, 1+self.k, self.k)\n",
        "\n",
        "        self.X = torch.stack(torch.meshgrid(x, t)).reshape(2,-1).T\n",
        "        self.X = self.X.to(device)\n",
        "        self.X.requires_grad = True\n",
        "\n",
        "\n",
        "\n",
        "        bc1 = torch.stack(torch.meshgrid(x[0], t)).reshape(2,-1).T\n",
        "        bc2 = torch.stack(torch.meshgrid(x[-1], t)).reshape(2,-1).T\n",
        "        ic1 = torch.stack(torch.meshgrid(x, t[0])).reshape(2,-1).T\n",
        "        self.X_train = torch.cat([bc1, bc2,  ic1 ])\n",
        "        self.X_train = self.X_train.to(device)\n",
        "\n",
        "        y_bc1 = torch.zeros(len(bc1))\n",
        "        y_bc2 = torch.zeros(len(bc2))\n",
        "\n",
        "        y_ic1 = torch.zeros(len(ic1))\n",
        "\n",
        "        self.y_train = torch.cat([y_bc1, y_bc2,  y_ic1])\n",
        "        self.y_train = self.y_train.to(device)\n",
        "\n",
        "        self.X_train = self.X_train.to(device)\n",
        "        self.y_train = self.y_train.to(device)\n",
        "\n",
        "        self.adam = torch.optim.Adam(self.model.parameters())\n",
        "        self.optimizer = torch.optim.LBFGS(self.model.parameters(),lr=0.001,max_iter=50000,max_eval=50000,history_size=50,tolerance_grad=1e-7,tolerance_change=1.0*np.finfo(float).eps,line_search_fn=\"strong_wolfe\")\n",
        "\n",
        "        self.criterion = nn.MSELoss()\n",
        "        self.iter = 1\n",
        "\n",
        "    def loss_func(self):\n",
        "        self.adam.zero_grad()\n",
        "        self.optimizer.zero_grad()\n",
        "        y_pred = self.model(self.X_train)\n",
        "        loss_data = self.criterion(y_pred,self.y_train)\n",
        "\n",
        "\n",
        "        u = self.model(self.X)\n",
        "        du_dX = torch.autograd.grad(u, self.X, grad_outputs=torch.ones_like(u), create_graph=True, retain_graph=True)[0]\n",
        "\n",
        "        du_dx = du_dX[:,0]\n",
        "        du_dt = du_dX[:,1]\n",
        "\n",
        "        du_dXX = torch.autograd.grad(du_dX, self.X, grad_outputs=torch.ones_like(du_dX), create_graph=True, retain_graph=True)[0]\n",
        "        du_dxx = du_dXX[:,0]\n",
        "        du_dtt = du_dXX[:,1]\n",
        "\n",
        "        du_dXXX = torch.autograd.grad(du_dXX, self.X, grad_outputs=torch.ones_like(du_dXX), create_graph=True, retain_graph=True)[0]\n",
        "        du_dXXXX = torch.autograd.grad(du_dXXX, self.X, grad_outputs=torch.ones_like(du_dXXX), create_graph=True, retain_graph=True)[0]\n",
        "        du_dxxxx = du_dXXXX[:,0]\n",
        "\n",
        "        t_grid = self.X[:, 1]\n",
        "        loss_bc3 = self.criterion((205)*du_dxx[torch.where(self.X[:, 0] == 0)[0]], torch.zeros_like(du_dxx[torch.where(self.X[:, 0] == 0)[0]]))  # d²u/dx²(0, t) = 0\n",
        "        loss_bc4 = self.criterion((205)*du_dxx[torch.where(self.X[:, 0] == 1)[0]], torch.zeros_like(du_dxx[torch.where(self.X[:, 0] == 1)[0]]))  # d²u/dx²(1, t) = 0\n",
        "        loss_ic2 = self.criterion(du_dt[torch.where(self.X[:, 1] == 0)[0]], torch.zeros_like(du_dt[torch.where(self.X[:, 1] == 0)[0]]))  # du/dt(x, 0) = 0\n",
        "        load_indices = torch.where(torch.isclose(self.X[:, 0], torch.tensor(0.25)))[0]\n",
        "\n",
        "        # Modify PDE loss to apply load only at x = 0.25\n",
        "        # Create a tensor with zeros and the load value at the specified location\n",
        "        load_values = torch.zeros_like(t_grid)\n",
        "        load_values[load_indices] = 100 * torch.sin(100 * t_grid[load_indices])\n",
        "\n",
        "        loss_pde = self.criterion((205)*du_dxxxx + (7830*0.012)*du_dtt, load_values)\n",
        "        loss = loss_data + loss_pde + loss_bc3 + loss_bc4 + loss_ic2\n",
        "        loss.backward(retain_graph=True)\n",
        "\n",
        "        if self.iter % 1000 == 0:\n",
        "          print(self.iter, loss.item())\n",
        "        self.iter += 1\n",
        "        return loss\n",
        "\n",
        "\n",
        "    def train(self):\n",
        "\n",
        "      self.model.train()\n",
        "      for i in range(20000):\n",
        "        self.adam.step(self.loss_func)\n",
        "      self.optimizer.step(self.loss_func)\n",
        "\n",
        "    def eval(self):\n",
        "      self.model.eval()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}